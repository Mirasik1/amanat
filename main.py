import telebot
from telebot import types
from telebot.handler_backends import State, StatesGroup
from telebot.custom_filters import SimpleCustomFilter
from telebot.storage import StateMemoryStorage
from config import TELEGRAM_BOT_TOKEN
from func import get_user_data, update_user_data, openai, create_table, create_db
import requests
from io import BytesIO
import json
from shapely.geometry import shape, Point
from telebot import custom_filters
state_storage=StateMemoryStorage()
create_db()
create_table()
admin_id = "894349873"
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN, state_storage=state_storage)
url=""
def handle_photo(message):
    photo_id = message.photo[-1].file_id
    file_info = bot.get_file(photo_id)
    photo_url = (
        f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_info.file_path}"
    )
    global url
    url=photo_url
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    location_button = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    map_button = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ(–ß–µ—Ä–µ–∑ –º–µ–Ω—é —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞)")
    markup.add(location_button,map_button)
    bot.set_state(message.from_user.id,Allstates.geo,message.chat.id)
    bot.send_message(
        message.chat.id,
        "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω—é —Ç–µ–ª–µ–≥—Ä–∞–º–∞",
        reply_markup=markup
    )
class Allstates(StatesGroup):
    info=State()
    lang = State()
    geo = State()
    photo=State()
    report_ad = State()
    report_del = State()
    ad = State()
    choice=State()

@bot.message_handler(commands=["start"])
def send_welcome(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="ru")
    btn2 = types.InlineKeyboardButton(text="“ö–∞–∑–∞“õ—à–∞", callback_data="kz")
    markup.add(btn1, btn2)
    bot.send_message(
        message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫üëáüèª / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑üëáüèª", reply_markup=markup
    )
    bot.set_state(message.from_user.id,Allstates.info,message.chat.id)


@bot.callback_query_handler(func=lambda call: call.data in ["ru", "kz","report_ad","report_delivery"],state=Allstates.info)
def callback_inline(call):
    language = "–†—É—Å—Å–∫–∏–π" if call.data == "ru" else "“ö–∞–∑–∞“õ—à–∞"
    if call.data=="ru" or call.data=="kz":
        menu(call.message, language)
    if call.data=="report_ad" or call.data=="report_delivery":
        handle_callback_query(call)


def menu(message,language):
    markup = types.InlineKeyboardMarkup()
    if language == "–†—É—Å—Å–∫–∏–π":
        btn1 = types.InlineKeyboardButton(
            "–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–π —Ä–µ–∫–ª–∞–º–µ", callback_data="report_ad"
        )
        btn2 = types.InlineKeyboardButton(
            "–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ", callback_data="report_delivery"
        )
    elif language == "“ö–∞–∑–∞“õ—à–∞":
        btn1 = types.InlineKeyboardButton(
            "–ñ–∞–ª–æ–±–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É", callback_data="report_ad"
        )
        btn2 = types.InlineKeyboardButton(
            "–ñ–∞–ª–æ–±–∞ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", callback_data="report_delivery"
        )
    else:
        bot.send_message(
            message.chat.id, "–û—à–∏–±–∫–∞, —è–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /start"
        )
        return

    markup.add(btn1, btn2)
    bot.send_message(
        message.chat.id,
        """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Sheker Emes Bot! üíö

–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω–æ —Å–æ–æ–±—â–∏—Ç—å –æ:

- –°–ª—É—á–∞—è—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∏ —Ä–µ–∫–ª–∞–º—ã –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ—â–µ—Å—Ç–≤üíä
- –§–∞–∫—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ—â–µ—Å—Ç–≤‚ùóÔ∏è

–î–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∂–∞–ª–æ–±—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É‚¨áÔ∏è""",
        reply_markup=markup,
    )
    bot.set_state(message.from_user.id, Allstates.choice, message.chat.id)


def handle_callback_query(call):

    if call.data == "report_ad":
        bot.send_message(
            call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã."
        )
        bot.set_state(call.message.from_user.id,Allstates.report_ad,call.message.chat.id)
    elif call.data=="report_delivery":
        bot.send_message(
            call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –æ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ(–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (–Ω–µ –±–æ–ª–µ–µ –¥–≤—É—Ö). –ù–µ –ø—Ä–µ–≤—ã—à–∞—é—â–µ–µ 10 –ú–ë. –ï—Å–ª–∏ –Ω–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å.)"
        )
        bot.set_state(call.message.from_user.id, Allstates.report_del, call.message.chat.id)
    else:
        pass

@bot.message_handler(content_types=["photo"])
def handle_report(message):
    print("Yes")
    handle_photo(message)
@bot.message_handler(content_types=["location"],state=Allstates.geo)
def handle_location(message):
    markup_remove = types.ReplyKeyboardRemove()
    bot.send_message(
        message.chat.id,
        "–í–∞—à–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞",
        reply_markup=markup_remove
    )
    try:
        photo_url = url

        response = openai(photo_url)
        bot.send_message(
            message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º."
        )
        bot.send_message(admin_id, response)
        markup = types.InlineKeyboardMarkup()
        btn_yes = types.InlineKeyboardButton(
            "–î–∞", callback_data="Yes"
        )
        btn_no = types.InlineKeyboardButton(
            "–ù–µ—Ç", callback_data="No"
        )
        markup.add(btn_yes, btn_no)
        bot.send_message(message.chat.id,
                         "–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã, –∫—Ç–æ –º–æ–∂–µ—Ç —Ç–∞–º –ø—Ä–æ–∂–∏–≤–∞—Ç—å/–∫—Ç–æ —Å–ø–æ—Å–æ–±–µ–Ω –≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ?",
                         reply_markup=markup)

    except Exception as e:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


@bot.message_handler(commands=["info"])
def show_info(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    #    for district in districts:
       # markup.add(
       #     types.InlineKeyboardButton(district, callback_data="district_" + district)
       # )
    #bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=markup)
    pass


bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.infinity_polling(skip_pending=True)
