import telebot
from telebot import types, custom_filters
import folium
from branca.colormap import LinearColormap
import geopandas as gpd
from telebot.handler_backends import State, StatesGroup
from telebot.custom_filters import SimpleCustomFilter
from telebot.storage import StateMemoryStorage
from config import TELEGRAM_BOT_TOKEN
from func import get_user_data, update_user_data, openai, create_db

from shapely.geometry import shape, Point
import context

state_storage = StateMemoryStorage()
context.create_db()
context.create_reports_table()
admin_id = "894349873"
bot = telebot.TeleBot("6811743988:AAEYlMWjrZIVbCvNxQ1YHBfyG7JhpyFkSOU", state_storage=state_storage)
url = ""
response=''
longitude=0
latitude=0

class Allstates(StatesGroup):
    language = State()
    geo = State()
    photo = State()
    report = State()
    choice = State()
    additional_info = State()
    send = State()
    additional_info_1=State()


def increment_report(latitude, longitude):
    gdf = gpd.read_file("data.geojson")
    point = Point(longitude, latitude)
    selected_object = gdf[gdf.geometry.contains(point)].iloc[0]
    selected_object['report'] += 1

    gdf.loc[gdf.index == selected_object.name] = selected_object


@bot.message_handler(commands=["start"])
def send_welcome(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="ru")
    btn2 = types.InlineKeyboardButton(text="“ö–∞–∑–∞“õ—à–∞", callback_data="kz")
    markup.add(btn1, btn2)
    bot.send_message(
        message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫üëáüèª / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑üëáüèª", reply_markup=markup
    )
    bot.set_state(message.from_user.id, Allstates.language, message.chat.id)


@bot.callback_query_handler(func=lambda call: call.data in ["ru", "kz"], state=Allstates.language)
def callback_inline(call):

    # –†—É—Å—Å–∫–∏–π-0, –ö–∞–∑–∞—Ö—Å–∫–∏–π-1
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫üëáüèª / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑üëáüèª",
        reply_markup=None
    )
    language = 0 if call.data == "ru" else 1
    if context.get_language_by_telegram_id(call.message.from_user.id) == None:
        context.insert_user(call.message.from_user.id, language)
        menu(call.message)
    else:
        context.change_language_by_telegram_id(call.message.from_user.id, language)
        menu(call.message)


def menu(message):

    language = context.get_language_by_telegram_id(message.from_user.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if language == 0:
        btn1 = types.KeyboardButton("–ù–µ–∑–∞–∫–æ–Ω–Ω–æ–π —Ä–µ–∫–ª–∞–º–∞üì∞")
        btn2 = types.KeyboardButton("–ù–µ–∑–∞–∫–æ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æüè≠")
    elif language == 1:
        btn1 = types.KeyboardButton("–ó–∞“£—Å—ã–∑ –∂–∞—Ä–Ω–∞–º–∞üì∞")
        btn2 = types.KeyboardButton("–ó–∞“£—Å—ã–∑ ”©–Ω–¥—ñ—Ä—ñ—Åüè≠")
    else:
        bot.send_message(
            message.chat.id, "–û—à–∏–±–∫–∞, —è–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /start"
        )
        return

    markup.add(btn1, btn2)
    bot.send_message(
        message.chat.id,
        """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Sheker Emes Bot! üíö

–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω–æ —Å–æ–æ–±—â–∏—Ç—å –æ:

- –°–ª—É—á–∞—è—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∏ —Ä–µ–∫–ª–∞–º—ã –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ—â–µ—Å—Ç–≤üíä
- –§–∞–∫—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ—â–µ—Å—Ç–≤‚ùóÔ∏è

–î–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∂–∞–ª–æ–±—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É‚¨áÔ∏è""",
        reply_markup=markup,
    )


@bot.message_handler(content_types=["text"],
                     func=lambda message: message.text in ["–ù–µ–∑–∞–∫–æ–Ω–Ω–æ–π —Ä–µ–∫–ª–∞–º–∞üì∞", "–ù–µ–∑–∞–∫–æ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æüè≠", "–ó–∞“£—Å—ã–∑ –∂–∞—Ä–Ω–∞–º–∞üì∞",
                                                           "–ó–∞“£—Å—ã–∑ ”©–Ω–¥—ñ—Ä—ñ—Åüè≠"])
def report(message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['report_type'] = message.text
    markup_remove = types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é',reply_markup=markup_remove)

    bot.set_state(message.from_user.id, Allstates.photo, message.chat.id)
@bot.message_handler(content_types=["text"],
                     func=lambda message: message.text in ["–ù–µ—Ç", "–î–∞"],state=Allstates.additional_info)
def send(message):
    markup_remove = types.ReplyKeyboardRemove()
    if message.text =="–î–∞":
        bot.set_state(message.from_user.id, Allstates.additional_info_1, message.chat.id)
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –¥–æ–ø–æ–ª—å–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",reply_markup=markup_remove)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['ad_info'] = message.text
            data['response'] = response
            data['photo_url'] = url
            data['longitude'] = longitude
            data['latitude'] = latitude
    else:
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ", reply_markup=markup_remove)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['ad_info'] = message.text
            data['response']=response
            data['photo_url'] = url
            data['longitude'] = longitude
            data['latitude'] = latitude
            data['ad_info_text']=""
            context.add_response(message.chat.id, data)
            admin_text = context.get_all_reports()
            bot.send_message(admin_id, str(data))

            increment_report(data['latitude'], data['longitude'])




@bot.message_handler(commands=['list'])
def send_admin(message):
    if message.chat.id == admin_id:
        admin_text = context.get_all_reports()
        bot.send_message(admin_id, admin_text)
    else:
        pass
@bot.message_handler(state=Allstates.additional_info_1)
def ask_ad_info(message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['ad_info_text'] = message.text

    bot.send_message(message.chat.id,"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º—ã –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º")
    context.add_response(message.chat.id, data)
    bot.set_state(message.from_user.id,Allstates.send,message.chat.id)

    bot.send_message(admin_id, str(data))


    increment_report(data['latitude'], data['longitude'])




@bot.message_handler(content_types=["photo"], state=Allstates.photo)
def handle_photo(message):
    photo_id = message.photo[-1].file_id
    file_info = bot.get_file(photo_id)
    photo_url = (
        f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_info.file_path}"
    )

    global url,response
    url = photo_url

    response = openai(url)


    bot.set_state(message.from_user.id, Allstates.geo, message.chat.id)
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω—é —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞")


@bot.message_handler(content_types=["location"], state=Allstates.geo)
def handle_location(message):
    global longitude,latitude
    longitude = message.location.longitude
    latitude = message.location.latitude
    markup_remove = types.ReplyKeyboardRemove()

    try:


        bot.send_message(
            message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.",
            reply_markup=markup_remove
        )

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn_yes = types.KeyboardButton(
            "–î–∞"
        )
        btn_no = types.KeyboardButton(
            "–ù–µ—Ç"
        )
        markup.add(btn_yes, btn_no)
        bot.send_message(message.chat.id,
                         "–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã, –∫—Ç–æ –º–æ–∂–µ—Ç —Ç–∞–º –ø—Ä–æ–∂–∏–≤–∞—Ç—å/–∫—Ç–æ —Å–ø–æ—Å–æ–±–µ–Ω –≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ?",
                         reply_markup=markup)
        bot.set_state(message.from_user.id,Allstates.additional_info,message.chat.id)
    except Exception as e:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@bot.message_handler(state="*", commands=['cancel'])
def any_state(message):
    bot.send_message(message.chat.id, "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏")
    bot.delete_state(message.from_user.id, message.chat.id)
@bot.message_handler(commands=["map"])
def show_map(message):
    center_latitude = 51.1694
    center_longitude = 71.4491
    m = folium.Map(location=[center_latitude, center_longitude], zoom_start=12)

    colormap = LinearColormap(['green', 'yellow', 'red'], vmin=0, vmax=50, index=[0, 25, 50])
    colormap.caption = '–ö–æ–ª-–≤–æ'

    gdf = gpd.read_file("data.geojson")
    gdf['report'] = gdf['report'].fillna(0)
    gdf = gdf.sort_values(by='report')

    for _, row in gdf.iterrows():
        color = colormap(row['report'])
        color = color[:-2]
        folium.GeoJson(row['geometry'],
                       style_function=lambda x, color=color: {'fillColor': color, 'color': 'none', 'weight': 0},
                       tooltip=f"{row['description']}<br>–†–µ–ø–æ—Ä—Ç–æ–≤: {int(row['report'])}").add_to(m)

    m.options['clickable'] = False

    m.save("index.html")


@bot.message_handler(commands=['excel'])
def send_excel(message):
    file_path = "C:/Users/Admin/PycharmProjects/amanat/reports.xlsx"
    with open(file_path, 'rb') as file:
        bot.send_document(message.chat.id, document=file)



bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.infinity_polling(skip_pending=True)