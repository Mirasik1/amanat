import telebot
from telebot import types
from telebot.handler_backends import State, StatesGroup
from telebot.custom_filters import SimpleCustomFilter
from telebot.storage import StateMemoryStorage
from config import TELEGRAM_BOT_TOKEN
from func import get_user_data, update_user_data, openai, create_table, create_db
import requests
from io import BytesIO
import json
from shapely.geometry import shape, Point

create_db()
create_table()
admin_id = "894349873"
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN, state_storage=StateMemoryStorage())



def download_image(url):
    response = requests.get(url)
    if response.status_code == 200:
        return BytesIO(response.content)
    return None


with open("data.geojson") as f:
    data = json.load(f)

for feature in data["features"]:
    if "description" in feature["properties"]:
        feature["properties"]["reports"] = 0

with open("upd_data.geojson", "w") as f:
    json.dump(data, f)


def get_location(latitude, longitude):
    try:
        point = Point(longitude, latitude)
        for feature in data["features"]:
            polygon = shape(feature["geometry"])
            if polygon.contains(point):
                return feature["properties"]["description"]
    except Exception as e:
        print(e)
        return None



def update_reports(latitude, longitude):
    point = Point(longitude, latitude)
    for feature in data["features"]:
        polygon = shape(feature["geometry"])
        if polygon.contains(point):
            feature["properties"]["reports"] += 1
            break


def get_user_state(message):
    user_data = get_user_data(message.chat.id)
    return user_data.get("state") if user_data else None


def send_report_to_admin(admin_id, photo_url, location, response_text):
    photo = download_image(photo_url)
    if photo:
        latitude, longitude = location
        caption = f"–ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n{response_text}\n–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {get_location(longitude=longitude, latitude=latitude)}"

        bot.send_photo(admin_id, photo, caption=caption)
    else:
        bot.send_message(admin_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")


def find_district(latitude, longitude):
    point = Point(longitude, latitude)
    for feature in data["features"]:
        polygon = shape(feature["geometry"])
        if polygon.contains(point):
            return feature["properties"]["description"]
    return "–†–∞–π–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"


def update_user_state(message, state):
    update_user_data(telegram_id=message.chat.id, state=state)


def set_state(user_id, state):
    pass


@bot.message_handler(commands=["start"])
def send_welcome(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="ru")
    btn2 = types.InlineKeyboardButton(text="“ö–∞–∑–∞“õ—à–∞", callback_data="kz")
    markup.add(btn1, btn2)
    bot.send_message(
        message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫üëáüèª / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑üëáüèª", reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data in ["ru", "kz"])
def callback_inline(call):
    language = "–†—É—Å—Å–∫–∏–π" if call.data == "ru" else "“ö–∞–∑–∞“õ—à–∞"
    update_user_data(telegram_id=call.message.chat.id, language=language)
    menu(call.message)


def menu(message):
    user_data = get_user_data(message.chat.id)
    if user_data:
        language = user_data["language"]
        markup = types.InlineKeyboardMarkup()
        if language == "–†—É—Å—Å–∫–∏–π":
            btn1 = types.InlineKeyboardButton(
                "–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–π —Ä–µ–∫–ª–∞–º–µ", callback_data="report_ad"
            )
            btn2 = types.InlineKeyboardButton(
                "–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ", callback_data="report_delivery"
            )
        elif language == "“ö–∞–∑–∞“õ—à–∞":
            btn1 = types.InlineKeyboardButton(
                "–ñ–∞–ª–æ–±–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É", callback_data="report_ad"
            )
            btn2 = types.InlineKeyboardButton(
                "–ñ–∞–ª–æ–±–∞ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", callback_data="report_delivery"
            )
        else:
            bot.send_message(
                message.chat.id, "–û—à–∏–±–∫–∞, —è–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /start"
            )
            return

        markup.add(btn1, btn2)
        bot.send_message(
            message.chat.id,
            """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Sheker Emes Bot! üíö

–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω–æ —Å–æ–æ–±—â–∏—Ç—å –æ:

- –°–ª—É—á–∞—è—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∏ —Ä–µ–∫–ª–∞–º—ã –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ—â–µ—Å—Ç–≤üíä
- –§–∞–∫—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ—â–µ—Å—Ç–≤‚ùóÔ∏è

–î–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∂–∞–ª–æ–±—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É‚¨áÔ∏è""",
            reply_markup=markup,
        )
    else:
        bot.send_message(
            message.chat.id, "–û—à–∏–±–∫–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    if call.data == "report_ad":
        update_user_data(call.message.chat.id, state="AWAITING_PHOTO")
        bot.send_message(
            call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã."
        )
    elif call.data=="report_delivery":
        update_user_data(call.message.chat.id, state="AWAITING_REPORT")
        bot.send_message(
            call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –æ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ(–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (–Ω–µ –±–æ–ª–µ–µ –¥–≤—É—Ö). –ù–µ –ø—Ä–µ–≤—ã—à–∞—é—â–µ–µ 10 –ú–ë. –ï—Å–ª–∏ –Ω–µ—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å.)"
        )
    elif call.data=="Yes":
        bot.send_message(call.message.chat.id,"–£–∫–∞–∂–∏—Ç–µ –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Ü–µ:–ü–æ—á–µ–º—É —É –≤–∞—Å —ç—Ç–æ –≤—ã–∑–≤–∞–ª–æ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è? –ö–∞–∫–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –º–µ—Å—Ç–µ/—É–≤–∏–¥–µ—Ç—å –Ω–∞ —Ñ–æ—Ç–æ (–∫—Ä–∞—Ç–∫–æ)?")
        update_user_data(call.message.chat.id,state="Text")
    elif call.data=="No":
        bot.send_message(call.message.chat.id,"–°–ø–∞—Å–∏–±–æ! ")


@bot.message_handler(
    content_types=["photo"],
    func=lambda message: get_user_state(message) == "AWAITING_REPORT",
)

def handle_report(message):
    photo_id = message.photo[-1].file_id
    file_info = bot.get_file(photo_id)
    photo_url = (
        f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_info.file_path}"
    )


    bot.send_message(
        message.chat.id,
        "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã –ø–æ–ª—É—á–µ–Ω–∞."
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    location_button = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    map_button = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ(–ß–µ—Ä–µ–∑ –º–µ–Ω—é —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞)")
    markup.add(location_button,map_button)
    update_user_data(message.chat.id, state="NEW_STATE_AFTER_REPORT", photo_url=photo_url)
    bot.send_message(
        message.chat.id,
        "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω—é —Ç–µ–ª–µ–≥—Ä–∞–º–∞",
        reply_markup=markup
    )




@bot.message_handler(
    content_types=["photo"],
    func=lambda message: get_user_state(message) == "AWAITING_PHOTO",
)
def handle_photo(message):
    photo_id = message.photo[-1].file_id
    file_info = bot.get_file(photo_id)
    photo_url = (
        f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_info.file_path}"
    )
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    location_button = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    map_button = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ(–ß–µ—Ä–µ–∑ –º–µ–Ω—é —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞)")
    markup.add(location_button,map_button)
    update_user_data(message.chat.id, state="AWAITING_LOCATION", photo_url=photo_url)
    bot.send_message(
        message.chat.id,
        "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω—é —Ç–µ–ª–µ–≥—Ä–∞–º–∞",
        reply_markup=markup
    )

@bot.message_handler(
    content_types=["location"],
    func=lambda message: get_user_state(message) == "NEW_STATE_AFTER_REPORT",
)
def handle_location(message):
    markup_remove = types.ReplyKeyboardRemove()
    bot.send_message(
        message.chat.id,
        "–í–∞—à–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞",
        reply_markup=markup_remove
    )
    user_data = get_user_data(message.chat.id)
    if user_data and "photo_url" in user_data:
        photo_url = user_data["photo_url"]
        location = (message.location.latitude, message.location.longitude)
        response = openai(photo_url)

        send_report_to_admin(admin_id, photo_url, location, response)

        bot.send_message(
            message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º."
        )
        markup=types.InlineKeyboardMarkup()
        btn_yes=types.InlineKeyboardButton(
                "–î–∞", callback_data="Yes"
            )
        btn_no = types.InlineKeyboardButton(
            "–ù–µ—Ç", callback_data="No"
        )
        markup.add(btn_yes,btn_no)
        bot.send_message(message.chat.id,
                         "–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã, –∫—Ç–æ –º–æ–∂–µ—Ç —Ç–∞–º –ø—Ä–æ–∂–∏–≤–∞—Ç—å/–∫—Ç–æ —Å–ø–æ—Å–æ–±–µ–Ω –≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ?",reply_markup=markup)

    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@bot.message_handler(
    content_types=["location"],
    func=lambda message: get_user_state(message) == "AWAITING_LOCATION",
)

def handle_location(message):
    markup_remove = types.ReplyKeyboardRemove()
    bot.send_message(
        message.chat.id,
        "–í–∞—à–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞",
        reply_markup=markup_remove
    )
    user_data = get_user_data(message.chat.id)
    if user_data and "photo_url" in user_data:
        photo_url = user_data["photo_url"]
        location = (message.location.latitude, message.location.longitude)
        response = openai(photo_url)

        send_report_to_admin(admin_id, photo_url, location, response)

        bot.send_message(
            message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º."
        )
        update_user_data(message.chat.id, state=None)
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


@bot.message_handler(commands=["info"])
def show_info(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    #    for district in districts:
       # markup.add(
       #     types.InlineKeyboardButton(district, callback_data="district_" + district)
       # )
    #bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=markup)
    pass

bot.infinity_polling()
